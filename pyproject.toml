[project]
name = "nl-fhir"
version = "1.2.0"
description = "Natural Language to FHIR R4 Bundle Converter"
authors = [{name = "NL-FHIR Team"}]
requires-python = ">=3.10,<3.11"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.8.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.2",
    "pytest>=7.4.3",
    "httpx>=0.25.2",
    "psutil>=5.9.0", # System monitoring for health checks
    "gunicorn>=20.1.0", # Production WSGI server
    "python-dotenv>=1.0.0", # Environment configuration
    "python-json-logger>=2.0.7", # Structured JSON logging in production
    # NLP Dependencies for Epic 2 - Using transformers instead of spaCy
    # "spacy>=3.7.0", # Removed: binary compatibility issues with thinc
    # "scispacy>=0.5.0", # Removed: depends on spaCy
    "chromadb>=0.5.0", # Vector database for RAG
    "openai>=1.0.0", # LLM integration
    "instructor>=1.3.0", # Structured LLM output with Pydantic
    "tiktoken>=0.7.0", # OpenAI tokenizer
    "numpy>=1.24.0", # Numerical operations
    "sentence-transformers>=2.2.0", # Embedding models
    "transformers>=4.30.0", # Hugging Face models
    # FHIR Dependencies for Epic 3
    "fhir.resources>=7.0.0", # FHIR R4 resource models and validation
    "pydantic-extra-types>=2.1.0", # Additional Pydantic types for FHIR
    "requests>=2.31.0", # HTTP client for HAPI FHIR API calls
    "aiohttp>=3.9.0", # Async HTTP client
    "pytest-asyncio>=1.1.0",
    "pydantic-settings>=2.10.1",
    "spacy>=3.8.7",
    "en-core-web-sm",
    "scispacy>=0.2.4",
    "en-core-sci-sm",
    "en-ner-bc5cdr-md",
    # MedSpaCy Clinical Intelligence Dependencies for Epic 2.5
    "medspacy==1.0.0", # Fixed version to avoid build issues
    # "quickumls>=1.4.0",  # Clinical concept normalization (optional) - may add later
    "pyrush>=1.0.8",
    "matplotlib>=3.10.6",
    "seaborn>=0.13.2",
    "pandas>=2.3.2",
    "pyjwt>=2.10.1",
    # Production Readiness Dependencies (Phase 1)
    "pytest-cov>=4.1.0", # Test coverage measurement
    "bandit>=1.7.5", # Security linting
    "safety>=2.3.0", # Dependency vulnerability scanning
    "prometheus-client>=0.19.0", # Metrics and monitoring
    # Code Quality Dependencies (Phase 2)
    "pre-commit>=3.5.0", # Git hooks for code quality
    "hypothesis>=6.92.0", # Property-based testing
    "mutmut>=2.4.0", # Mutation testing
    "ruff>=0.1.0", # Fast Python linter and formatter
    "mypy>=1.7.0", # Static type checking
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/nl_fhir"]

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "--tb=short --strict-markers --cov=src/nl_fhir --cov-report=term-missing --cov-report=html --cov-fail-under=85"
markers = [
    # Test Speed
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast (<1s)",
    # Test Type
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests requiring external services",
    "e2e: marks tests as end-to-end tests",
    # Test Focus
    "api: marks tests for API endpoints",
    "security: marks tests for security validation",
    "performance: marks tests for performance requirements",
    "load: marks tests for load and concurrency",
    "docker: marks tests for Docker deployment",
    # Epic/Feature
    "epic1: marks tests for Epic 1 (Web Interface)",
    "epic2: marks tests for Epic 2 (NLP Pipeline)",
    "epic3: marks tests for Epic 3 (FHIR Assembly)",
    "epic4: marks tests for Epic 4 (Reverse Validation)",
    "epic5: marks tests for Epic 5 (Infrastructure)",
    "epic6: marks tests for Epic 6 (Foundation Resources)",
    "epic_iw: marks tests for Epic IW-001 (Infusion Workflow)",
    # Quality Gates
    "smoke: marks critical smoke tests that must always pass",
    "regression: marks regression tests for known issues",
]

[tool.uv.sources]
en-core-web-sm = { url = "https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.8.0/en_core_web_sm-3.8.0.tar.gz" }
en-core-sci-sm = { url = "https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.2.4/en_core_sci_sm-0.2.4.tar.gz" }
en-ner-bc5cdr-md = { url = "https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.2.4/en_ner_bc5cdr_md-0.2.4.tar.gz" }
# Note: MedSpaCy clinical models will be downloaded via spacy download commands
# en_core_med7_lg will be installed separately as it requires special handling

[tool.ruff]
# Python version
target-version = "py310"

# Line length
line-length = 100

# Enable pycodestyle (E), Pyflakes (F), isort (I), and more
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]

# Ignore specific rules
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

# Exclude directories
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    ".git",
    "build",
    "dist",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["B", "S"]  # Relax some rules for tests

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
ignore_missing_imports = true
no_implicit_optional = true

# Exclude specific directories
exclude = [
    'tests/',
    '.venv/',
]
