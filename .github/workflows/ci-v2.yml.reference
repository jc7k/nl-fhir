name: CI Pipeline v2 - NL-FHIR Production Readiness

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Auto-cancel outdated runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.10"

jobs:
  # ============================================================================
  # CRITICAL STAGE: Blocking Quality Gates
  # These MUST pass for the pipeline to succeed
  # ============================================================================

  unit-tests:
    name: "Critical: Unit Tests (Factory + NLP)"
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-path: "tests/services/fhir/factories/ tests/nlp/"
      test-name: "Unit Tests"
      timeout-minutes: 5
      step-timeout-minutes: 3
      pytest-flags: "-v --tb=short --no-cov"
      enable-coverage: false
      is-warning-stage: false

  api-tests:
    name: "Critical: API Endpoint Tests"
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-path: "tests/api/"
      test-name: "API Tests"
      timeout-minutes: 7
      step-timeout-minutes: 5
      pytest-flags: "-v --tb=short"
      enable-coverage: true
      is-warning-stage: false

  # ============================================================================
  # SECURITY STAGE: Warning Quality Gates
  # Failures are reported but don't block the pipeline
  # ============================================================================

  security-tests:
    name: "Security: Test Suite"
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-path: "tests/security/"
      test-name: "Security Tests"
      timeout-minutes: 5
      step-timeout-minutes: 3
      pytest-flags: "-v --tb=short"
      enable-coverage: false
      is-warning-stage: true

  security-scan:
    name: "Security: Bandit Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true  # Warning stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env

      - name: Run Bandit security linter
        run: |
          uv run bandit -r src/nl_fhir/ -ll -f json -o bandit-report.json || true
          uv run bandit -r src/nl_fhir/ -ll

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

  dependency-scan:
    name: "Security: Dependency Vulnerabilities"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true  # Warning stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env

      - name: Run Safety vulnerability scan
        run: |
          uv run safety check --json --output safety-report.json || true
          uv run safety check

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-vulnerability-report
          path: safety-report.json
          retention-days: 30

  sbom-generation:
    name: "Security: SBOM Generation"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true  # Warning stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          format: cyclonedx-json
          output-file: sbom.cyclonedx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.cyclonedx.json
          retention-days: 90

  # ============================================================================
  # PERFORMANCE STAGE: Warning Quality Gates
  # Failures are reported but don't block the pipeline
  # ============================================================================

  load-tests:
    name: "Performance: Load & Concurrency Tests"
    uses: ./.github/workflows/reusable-test.yml
    with:
      test-path: "tests/load/"
      test-name: "Load Tests"
      timeout-minutes: 10
      step-timeout-minutes: 7
      pytest-flags: "-v --tb=short --no-cov"
      enable-coverage: false
      is-warning-stage: true

  docker-tests:
    name: "Performance: Docker Deployment Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Warning stage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: ./.github/actions/setup-python-env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Docker configuration tests
        run: |
          uv run pytest tests/deployment/ -v --tb=short -k "not slow and not integration" --no-cov \
            --junit-xml=test-results/docker-tests.xml
        timeout-minutes: 3

      - name: Build Docker image (with layer caching)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: nl-fhir:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test Docker image starts and responds
        run: |
          docker run -d --name nl-fhir-test -p 8001:8001 nl-fhir:ci
          sleep 10
          curl -f http://localhost:8001/health || exit 1
          docker stop nl-fhir-test
        timeout-minutes: 2

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-docker
          path: test-results/*.xml
          retention-days: 30

  # ============================================================================
  # COVERAGE STAGE: Aggregate and Upload Coverage
  # ============================================================================

  coverage-upload:
    name: "Coverage: Upload to Codecov"
    runs-on: ubuntu-latest
    needs: [api-tests]  # Only API tests generate coverage
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-nl-fhir
          fail_ci_if_error: false  # Don't block on upload failures
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # ============================================================================
  # QUALITY SUMMARY: Final Reporting and Quality Gate
  # ============================================================================

  quality-summary:
    name: "Quality Summary & Final Report"
    runs-on: ubuntu-latest
    needs:
      # Critical stages (blocking)
      - unit-tests
      - api-tests
      # Security stages (warning)
      - security-tests
      - security-scan
      - dependency-scan
      - sbom-generation
      # Performance stages (warning)
      - load-tests
      - docker-tests
      # Coverage stage
      - coverage-upload
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true

      - name: Generate quality summary
        run: |
          echo "# 🎯 CI Pipeline Results - v2" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline:** \`${{ github.workflow }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🚨 Critical Quality Gates (Blocking)" >> $GITHUB_STEP_SUMMARY
          echo "These MUST pass for the pipeline to succeed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 🔒 Security Quality Gates (Warning)" >> $GITHUB_STEP_SUMMARY
          echo "Failures are reported but don't block the pipeline." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bandit Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.sbom-generation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## ⚡ Performance Quality Gates (Warning)" >> $GITHUB_STEP_SUMMARY
          echo "Failures are reported but don't block the pipeline." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Load Tests | ${{ needs.load-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Tests | ${{ needs.docker-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📊 Coverage & Reporting" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Upload | ${{ needs.coverage-upload.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## ℹ️ Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "⚠️  **Skipped in CI/CD** (run locally with docker-compose)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** GitHub Actions service container health checks have hardcoded 5-6 retry limits." >> $GITHUB_STEP_SUMMARY
          echo "HAPI FHIR requires 35-40s initialization, exceeding GitHub Actions wait time." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Local Testing:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose up -d hapi-fhir" >> $GITHUB_STEP_SUMMARY
          echo "uv run pytest tests/epic/ tests/integration/ -v" >> $GITHUB_STEP_SUMMARY
          echo "docker-compose down" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📖 **Full Guide:** \`docs/testing/LOCAL_INTEGRATION_TESTS.md\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Check critical quality gates
        run: |
          echo "Checking critical quality gates..."

          # Critical stages that MUST pass
          UNIT_RESULT="${{ needs.unit-tests.result }}"
          API_RESULT="${{ needs.api-tests.result }}"

          FAILED=0

          if [[ "$UNIT_RESULT" != "success" ]]; then
            echo "❌ Unit Tests failed: $UNIT_RESULT"
            FAILED=1
          else
            echo "✅ Unit Tests passed"
          fi

          if [[ "$API_RESULT" != "success" ]]; then
            echo "❌ API Tests failed: $API_RESULT"
            FAILED=1
          else
            echo "✅ API Tests passed"
          fi

          if [[ $FAILED -eq 1 ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ❌ Pipeline Failed" >> $GITHUB_STEP_SUMMARY
            echo "One or more **critical quality gates** failed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Review the failed stages above and fix the issues before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Pipeline Passed" >> $GITHUB_STEP_SUMMARY
          echo "All **critical quality gates** passed! 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Warning stages** may have failures - review above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🤖 Generated with [Claude Code](https://claude.com/claude-code)" >> $GITHUB_STEP_SUMMARY
